using System;
using System.Collections.Generic;
using Microsoft.Win32;
using System.Security.Cryptography;
using System.IO;
using System.Xml;
using System.Text.RegularExpressions;
using Shell32; // "Microsoft Shell Control And Automation" 
using SHDocVw; // "Microsoft Internet Controls"
using MSHTML; // "Mirosoft HTML Object Lirary"

namespace AutostartLocationsMalwareScanner
{
    class Program
    {
     
        static string windir = Environment.GetEnvironmentVariable("windir").ToLower();
        static string pfiles = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles).ToLower();
       
        // calculate file hash
        static string getFileHash(string path)
        {
            try
            {
                MD5 hashGenerator = MD5.Create();
                byte[] b = File.ReadAllBytes(path);
                byte[] h = hashGenerator.ComputeHash(b);
                string hash = BitConverter.ToString(h).Replace("-", "");
                return hash;
            }
            catch(Exception e)
            {
                return null; 
            }
        }

        // LNK parser function
        static string getPathFromLnk(string lnkPath)
        {
            Type t = Type.GetTypeFromProgID("Shell.Application");
            dynamic shell = Activator.CreateInstance(t);

            Folder f = shell.NameSpace(System.IO.Path.GetDirectoryName(lnkPath));
            FolderItem fi = f.ParseName(System.IO.Path.GetFileName(lnkPath));

            if (fi != null)
            {
                Shell32.ShellLinkObject link = (Shell32.ShellLinkObject)fi.GetLink;
                return link.Path;

            }
            else
                return null;

        }
      
        // check if we should consider this file path suspected
        static bool isPathSuspected(string path)
        {
            string pathl = Environment.ExpandEnvironmentVariables(path).ToLower().Trim('\"');
            string ext = Path.GetExtension(pathl);

            // let's assume the path is not suspected if...
            if (ext.Equals("")) // ...it doesn't have any extension
                return false;
            else if (ext.Equals(".ini")) // ...it is an .ini file
                return false;
            else if (pathl.Contains(windir) || pathl.Contains(pfiles) ) // ...it is inside Program Files or Windows dirs
                return false;
            else
                return true;
        }

        //registry search
        static void regSearch(bool CurrentUser,string subKeyName,string valueName, List<string> list)
        {
            try
            {
                RegistryKey key = Registry.CurrentUser.OpenSubKey(subKeyName);

                if (valueName != null)
                {
                    string f = (string)key.GetValue(valueName);

                    if (f.EndsWith("lnk")) //if it is a link ...
                    {
                        // ... then extract the path from LNK and add to list
                         list.Add(getPathFromLnk(f));

                    }
                    else
                    {
                        // add file path to list
                         list.Add(f);
                    }
                }
                else
                {
                    // check multiple values
                    string[] valuesNames = key.GetValueNames();

                    foreach (var name in valuesNames)
                    {
                        string f = (string)key.GetValue(name);
                        if (f.EndsWith("lnk"))
                        {
                             list.Add(getPathFromLnk(f));

                        }
                        else
                        {
                             list.Add(f);
                        }


                    }
                }
            }
            catch (Exception e) { }
        }

        // find files in a directory and subdirs
        static void fileSearch(string dir, List<string> list)
        {
            try
            {
                string[] files = Directory.GetFiles(dir);

                foreach (string f in files)
                {
                    if (f.EndsWith("lnk"))
                    {
                        list.Add(getPathFromLnk(f));

                    }
                    else
                        list.Add(f);
                }
            }
            catch (Exception e) { }

            try
            {
                string[] dirs = Directory.GetDirectories(dir);
                foreach (string d in dirs)
                {
                    fileSearch(d, list);
                }
            }
            catch(Exception e) { }
        }


        // simple task scheduler scanning function
        static void tasksSearch(List<string> list)
        {
            List<string> listXml = new List<string>();
            fileSearch(windir + @"\System32\Tasks", listXml);

            foreach (string t in listXml)
            {
                try
                {
                    XmlDocument xmlDoc = new XmlDocument();
                    xmlDoc.Load(t);

                    XmlNodeList cmdList = xmlDoc.GetElementsByTagName("Command");
                    list.Add(cmdList[0].InnerText);
                }
                catch (Exception e) { }
            }
        }


        // Checks any hash on VirusTotal using IE COM without using VT API
        // VT works best with latest browsers and it may cause some problems with IE COM.
        // That is why we send a request to https://www.virustotal.com/old-browsers 
        static string vt(string hash)
        {
            try
            {
                InternetExplorer IEControl = new InternetExplorer();
                IWebBrowserApp ie = (IWebBrowserApp)IEControl;

                ie.Visible = false;
                ie.Navigate("https://www.virustotal.com/old-browsers/file/" + hash);
                while (ie.Busy)
                {
                    System.Threading.Thread.Sleep(1000);

                }

                IHTMLDocument2 doc = (IHTMLDocument2)ie.Document;
                string html = doc.body.innerHTML;

                ie.Quit();

                Match m = Regex.Match(html, "<span id=\"detections\">(.*?)</span>");
                if(m.Length>0)
                    return m.Groups[1].ToString();
                else
                    return null;
            }
            catch(Exception e)
            {
                return null;
            }
        }
      
        static void Main(string[] args)
        {

            // search in autostart filesystem locations
            Console.WriteLine("Searching in autostart filesystem locations...");
            List<string> list = new List<string>();
            string appDataDir = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            fileSearch(appDataDir + @"\Microsoft\Windows\Start Menu\Programs\Startup", list);
            fileSearch(@"C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp", list);

            // search in selected registry hives
            Console.WriteLine("Searching in registry...");
            List<string> listReg = new List<string>();
            regSearch(true, "Software\\Microsoft\\Windows\\CurrentVersion\\Run",null, list);
            regSearch(true, "Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce",null, list);
            regSearch(true, "Environment", "UserInitMprLogonScript", list);

            //search scheduled tasks
            Console.WriteLine("Searching in scheduled tasks...");
            tasksSearch(list);

            if(list.Count==0)
            {
                Console.WriteLine("No suspected files found");
                return;
            }

            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine($"\r\nChecking suspected files");

            // send suspected hashes to VirusTotal
            foreach (string path in list)
            {
                if (isPathSuspected(path))
                {

                    try
                    {
                        Console.ForegroundColor = ConsoleColor.DarkGray;
                        Console.WriteLine($"\r\nsending hash of {path} to VirusTotal...");
                        string fileHash = getFileHash(path);
                        if(fileHash==null)
                        {
                            Console.ForegroundColor = ConsoleColor.White;
                            Console.WriteLine($"{path} - Error, can't access this file");
                            continue;
                        }
                        string detections = vt(fileHash);
                        if (detections != null)
                        {
                            Console.ForegroundColor = ConsoleColor.Red;
                            Console.WriteLine($"{path} - {detections} detections");
                        }
                        else
                        {
                            Console.ForegroundColor = ConsoleColor.Gray;
                            Console.WriteLine($"{path} - no detections");
                        }
                    }
                    catch(Exception e)
                    {
                        Console.ForegroundColor = ConsoleColor.White;
                        Console.WriteLine($"{path} - Error");
                    }

                }
            }

            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine("\r\nDone");
            Console.Read();
          

        }
    }
}
