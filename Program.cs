using System;
using System.Collections.Generic;
using Microsoft.Win32;
using System.Security.Cryptography;
using System.IO;
using System.Xml;
using System.Text.RegularExpressions;
using Shell32; // add reference to "Microsoft Shell Control And Automation" 
using SHDocVw; // add reference to "Microsoft Internet Controls"
using MSHTML; // add reference to  "Mirosoft HTML Object Lirary"
using Microsoft.Office.Interop.Word; // add reference to "Microsoft Word Object Library"
using Microsoft.Office.Core; // add reference to "Microsoft Office Object Library"

namespace AutostartLocationsMalwareScanner
{
    class Program
    {
     
        // windows directory path
        static string windir = Environment.GetEnvironmentVariable("windir").ToLower();

        // program files directory path
        static string pfiles = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles).ToLower();

        // calculate file hash
        static string getFileHash(string path)
        {
            try
            {
                MD5 hashGenerator = MD5.Create();
                byte[] b = File.ReadAllBytes(path);
                byte[] h = hashGenerator.ComputeHash(b);
                string hash = BitConverter.ToString(h).Replace("-", "");
                return hash;
            }
            catch(Exception e)
            {
                return null; 
            }
        }

        // LNK parser function
        static string getPathFromLnk(string lnkPath)
        {
            // create instance of Shell.Application COM           
            Type t = Type.GetTypeFromProgID("Shell.Application");
            dynamic shell = Activator.CreateInstance(t);

            // https://docs.microsoft.com/en-us/windows/win32/shell/nse-works
            // "Behind the scenes, every folder that Windows Explorer displays is represented by 
            // a Component Object Model(COM) object called a folder object.Each time the user interacts with 
            // a folder or its contents, the Shell communicates with the associated folder object through 
            // one of a number of standard interfaces."

            // get the folder object from LNK path
            Folder f = shell.NameSpace(System.IO.Path.GetDirectoryName(lnkPath));

            // get the folder item (LNK file)
            FolderItem fi = f.ParseName(System.IO.Path.GetFileName(lnkPath));

            if (fi != null)
            {
                // extract path from LNK file
                Shell32.ShellLinkObject link = (Shell32.ShellLinkObject)fi.GetLink;
                return link.Path;

            }
            else
                return null;

        }
      
        // check if we should consder this file path suspected
        static bool isPathSuspected(string path)
        {
            string pathl = Environment.ExpandEnvironmentVariables(path).ToLower().Trim('\"');
            string ext = Path.GetExtension(pathl);

            // let's assume the path is not suspected if...
            if (ext.Equals("")) // ...it has no extension
                return false;
            else if (ext.Equals(".ini")) // ...it is an .ini file
                return false;
            else if (pathl.Contains(windir) || pathl.Contains(pfiles) ) // ...it is inside Program Files or Windows dirs
                return false;
            else
                return true;
        }

        static bool containsMacro(string filePath)
        {
            try
            {
                // Create MS Word instance
                Microsoft.Office.Interop.Word.Application w = new Microsoft.Office.Interop.Word.Application();
                // Disables macros 
                w.Application.AutomationSecurity = MsoAutomationSecurity.msoAutomationSecurityForceDisable;  
           
                // Open document
                Microsoft.Office.Interop.Word.Document doc = w.Documents.Open(filePath, false, true);

                // Check if there are any macros
                if (doc.HasVBProject)
                {
                    return true;
                }

                // Close the document
                doc.Close();

                // Quit MS Word
                w.Quit();
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return false;
        }


        //registry search
        static void regSearch(bool CurrentUser,string subKeyName,string valueName, List<string> list)
        {
            try
            {
                RegistryKey key = Registry.CurrentUser.OpenSubKey(subKeyName);

                if (valueName != null)
                {
                    string f = (string)key.GetValue(valueName);

                    if (f.EndsWith("lnk")) //if it is a link ...
                    {
                        // ... then extract the path from LNK and add to list
                         list.Add(getPathFromLnk(f));

                    }
                    else
                    {
                        // add file path to list
                         list.Add(f);
                    }
                }
                else
                {
                    // check multiple values
                    string[] valuesNames = key.GetValueNames();

                    foreach (var name in valuesNames)
                    {
                        string f = (string)key.GetValue(name);
                        if (f.EndsWith("lnk"))
                        {
                             list.Add(getPathFromLnk(f));

                        }
                        else
                        {
                             list.Add(f);
                        }


                    }
                }
            }
            catch (Exception e) { }
        }

        // find files in a directory and subdirs
        static void fileSearch(string dir, List<string> list)
        {
            try
            {
                string[] files = Directory.GetFiles(dir);

                foreach (string f in files)
                {
                    if (f.EndsWith("lnk"))
                    {
                        list.Add(getPathFromLnk(f));

                    }
                    else
                        list.Add(f);
                }
            }
            catch (Exception e) { }

            try
            {
                string[] dirs = Directory.GetDirectories(dir);
                foreach (string d in dirs)
                {
                    fileSearch(d, list);
                }
            }
            catch(Exception e) { }
        }


        // simple task scheduler scanning function
        static void tasksSearch(List<string> list)
        {
            // list all files in Tasks dir
            List<string> listXml = new List<string>();
            fileSearch(windir + @"\System32\Tasks", listXml);

            // iterate over the files
            foreach (string t in listXml)
            {
                try
                {
                    // load xml task file
                    XmlDocument xmlDoc = new XmlDocument();
                    xmlDoc.Load(t);

                    // search for command tag
                    XmlNodeList cmdList = xmlDoc.GetElementsByTagName("Command");
                    if (cmdList.Count > 0)
                    {
                        // add extracted path to the list
                        list.Add(cmdList[0].InnerText);
                    }
                }
                catch (Exception e) { }
            }
        }


        // Checks any hash on VirusTotal using IE COM without using VT API
        static string vt(string hash)
        {
            try
            {
                // We can't use WebClient because VirusTotal websites executes some JavaScript
                // We are not using WebBrowser because it shows too many Javascript engine errors and VT just doesn't work with it

                // The solution is to create Ineternet Explorer object via COM
                InternetExplorer IEControl = new InternetExplorer();
                IWebBrowserApp ie = (IWebBrowserApp)IEControl;

                // make IE invisible
                ie.Visible = false;

                // navigate to virustotal for old browsers
                ie.Navigate("https://www.virustotal.com/old-browsers/file/" + hash);

                // wait for the page to download
                while (ie.Busy)
                {
                    System.Threading.Thread.Sleep(1000);

                }

                // get the HTML content
                IHTMLDocument2 doc = (IHTMLDocument2)ie.Document;
                string html = doc.body.innerHTML;

                // find information about detections
                Match m = Regex.Match(html, "<span id=\"detections\">(.*?)</span>");
                if (m.Length>0)
                    return m.Groups[1].ToString();
                else
                    return null;
            }
            catch(Exception e)
            {
                return null;
            }
        }
      
        static void Main(string[] args)
        {

            // search in autostart filesystem locations
            Console.WriteLine("Searching in autostart filesystem locations...");
            List<string> list = new List<string>();
            string appDataDir = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            fileSearch(appDataDir + @"\Microsoft\Windows\Start Menu\Programs\Startup", list);
            fileSearch(@"C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp", list);

            // search in selected registry hives
            Console.WriteLine("Searching in registry...");
            List<string> listReg = new List<string>();
            regSearch(true, "Software\\Microsoft\\Windows\\CurrentVersion\\Run",null, list);
            regSearch(true, "Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce",null, list);
            regSearch(true, "Environment", "UserInitMprLogonScript", list);

            //search scheduled tasks
            Console.WriteLine("Searching in scheduled tasks...");
            tasksSearch(list);

            //search for files in My Documents and Desktop folders
            Console.WriteLine("Searching in user folders...");
            List<string> userFiles = new List<string>();
            fileSearch(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments).ToLower(), userFiles);
            fileSearch(Environment.GetFolderPath(Environment.SpecialFolder.Desktop).ToLower(), userFiles);


            // check if any of these files contain macro
            foreach(string dfile in userFiles)
            {
                if (dfile.ToLower().EndsWith(".doc") || dfile.ToLower().EndsWith(".docm"))
                {
                    Console.ForegroundColor = ConsoleColor.Yellow;
                    Console.Write($"\r\nChecking if {dfile} contains macros... ");

                    if (containsMacro(dfile))
                    {
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.Write(" YES");

                        //if there is a macro add this file to the list of suspected files
                        list.Add(dfile); 
                    }
                    else
                    {
                        Console.ForegroundColor = ConsoleColor.Green;
                        Console.Write(" NO");

                    }
                }
            }
            
            // quit if there are no suspected files
            if (list.Count==0)
            {
                Console.WriteLine("No suspected files found");
                return;
            }

            

            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine($"\r\nChecking suspected files");

            // send suspected hashes to VirusTotal
            foreach (string path in list)
            {
                if (isPathSuspected(path))
                {

                    try
                    {
                        Console.ForegroundColor = ConsoleColor.DarkGray;
                        Console.WriteLine($"\r\nSending hash of {path} to VirusTotal...");
                        string fileHash = getFileHash(path);
                        if(fileHash==null)
                        {
                            Console.ForegroundColor = ConsoleColor.White;
                            Console.WriteLine($"{path} - Error, can't access this file");
                            continue;
                        }
                        string detections = vt(fileHash);
                        if (detections != null)
                        {
                            Console.ForegroundColor = ConsoleColor.Red;
                            Console.WriteLine($"{path} - {detections} detections");
                        }
                        else
                        {
                            Console.ForegroundColor = ConsoleColor.Gray;
                            Console.WriteLine($"{path} - no detections");
                        }
                    }
                    catch(Exception e)
                    {
                        Console.ForegroundColor = ConsoleColor.White;
                        Console.WriteLine($"{path} - Error");
                    }

                }
            }

            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine("\r\nDone");
            Console.Read();
          

        }
    }
}
